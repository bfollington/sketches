(ns sketches.celllar-2d-rules)

(defn test-rules [neighbours]
  (case neighbours

    [[1 0 0]
     [0 0 0]
     [0 0 0]] [5 1]

    [[0 0 1]
     [0 0 0]
     [0 0 0]] [5 1]

    [[0 0 0]
     [0 0 0]
     [1 0 0]] [5 1]

    [[0 0 0]
     [0 0 0]
     [0 0 1]] [5 1]

    [[1 1 0]
     [0 0 0]
     [0 0 0]] [4 1]

    [[0 0 0]
     [0 0 0]
     [0 1 1]] [4 1]

    [[0 1 1]
     [0 0 0]
     [0 0 0]] [4 1]

    [[0 0 0]
     [0 0 0]
     [1 1 0]] [4 1]


    [[0 1 0]
     [0 0 0]
     [0 0 0]] [3 1]

    [[0 0 0]
     [0 0 0]
     [0 1 0]] [3 1]

    [[0 0 0]
     [0 0 1]
     [0 0 0]] [3 1]

    [[0 0 0]
     [1 0 0]
     [0 0 0]] [3 1]

    [[1 0 1]
     [0 0 0]
     [0 0 0]] [1 1]

    ;; [[0 0 0]
    ;;  [0 0 0]
    ;;  [1 0 1]] [1 1]

    [[0 0 1]
     [0 0 0]
     [0 0 1]] [1 1]

    [[1 0 0]
     [0 0 0]
     [1 0 0]] [1 1]

    [[1 0 0]
     [1 0 1]
     [1 0 0]] [6 1]

    [[1 1 1]
     [0 0 0]
     [0 1 0]] [6 1]

    [[0 1 0]
     [0 0 0]
     [1 1 1]] [6 1]

    [[0 0 1]
     [1 0 1]
     [0 0 1]] [6 1]

    ;; [[0 0 0]
    ;;  [0 0 0]
    ;;  [1 0 0]] [6 1]

    ;; [[0 0 0]
    ;;  [0 0 0]
    ;;  [0 0 1]] [3 1]

    ;; [[0 0 1]
    ;;  [0 1 0]
    ;;  [1 0 0]] [6 1]


    ;; [[1 0 1]
    ;;  [0 0 0]
    ;;  [1 0 0]] [7 1]

    ;; [[0 0 0]
    ;;  [0 0 1]
    ;;  [0 0 0]] [1 1]

    ;; [[1 0 1]
    ;;  [0 0 0]
    ;;  [0 0 0]] [1 1]

    ;; [[1 0 1]
    ;;  [0 0 0]
    ;;  [1 0 1]] [1 1]

    ;; [[1 0 0]
    ;;  [0 0 0]
    ;;  [0 0 0]] [3 1]

    ;; [[0 0 1]
    ;;  [0 0 0]
    ;;  [0 0 0]] [5 1]

    ;; [[1 0 0]
    ;;  [0 0 0]
    ;;  [0 0 1]] [4 1]

    [2 0]))

(defn more-rules [neighbours]
  (case neighbours

    [[0 1 0]
     [0 0 0]
     [0 0 0]] [5 1]

    [[0 0 0]
     [0 0 1]
     [0 0 0]] [5 1]

    [[0 0 0]
     [1 0 0]
     [0 0 0]] [5 1]

    [[0 0 0]
     [0 0 0]
     [0 1 0]] [5 1]

    [[0 1 0]
     [1 0 0]
     [0 0 0]] [4 1]

    [[0 0 0]
     [0 0 1]
     [0 1 0]] [4 1]

    [[0 1 0]
     [0 0 1]
     [0 0 0]] [4 1]

    [[0 0 0]
     [1 0 0]
     [0 1 0]] [4 1]


    [[0 1 0]
     [0 1 0]
     [0 0 0]] [3 1]

    [[0 0 0]
     [0 1 0]
     [0 1 0]] [3 1]

    [[0 1 0]
     [0 1 1]
     [0 0 0]] [3 1]

    [[0 0 0]
     [1 1 0]
     [0 1 0]] [3 1]

    ;; [[1 0 1]
    ;;  [0 0 0]
    ;;  [0 0 0]] [1 1]

    ;; ;; [[0 0 0]
    ;; ;;  [0 0 0]
    ;; ;;  [1 0 1]] [1 1]

    ;; [[0 0 1]
    ;;  [0 0 0]
    ;;  [0 0 1]] [1 1]

    ;; [[1 0 0]
    ;;  [0 0 0]
    ;;  [1 0 0]] [1 1]

    ;; [[1 0 0]
    ;;  [1 0 1]
    ;;  [1 0 0]] [6 1]

    ;; [[1 1 1]
    ;;  [0 0 0]
    ;;  [0 1 0]] [6 1]

    ;; [[0 1 0]
    ;;  [0 0 0]
    ;;  [1 1 1]] [6 1]

    ;; [[0 0 1]
    ;;  [1 0 1]
    ;;  [0 0 1]] [6 1]

    ;; [[0 0 0]
    ;;  [0 0 0]
    ;;  [1 0 0]] [6 1]

    ;; [[0 0 0]
    ;;  [0 0 0]
    ;;  [0 0 1]] [3 1]

    ;; [[0 0 1]
    ;;  [0 1 0]
    ;;  [1 0 0]] [6 1]


    ;; [[1 0 1]
    ;;  [0 0 0]
    ;;  [1 0 0]] [7 1]

    ;; [[0 0 0]
    ;;  [0 0 1]
    ;;  [0 0 0]] [1 1]

    [[1 0 1]
     [0 0 0]
     [0 0 0]] [1 1]

    [[1 0 1]
     [0 0 0]
     [1 0 1]] [1 1]

    ;; [[1 0 0]
    ;;  [0 0 0]
    ;;  [0 0 0]] [3 1]

    ;; [[0 0 1]
    ;;  [0 0 0]
    ;;  [0 0 0]] [5 1]

    ;; [[1 0 0]
    ;;  [0 0 0]
    ;;  [0 0 1]] [4 1]

    [2 0]))

(defn one-or-zero []
  (rand-nth [0 1]))


(defn random-rule [id]
  [[[(one-or-zero) 0 (one-or-zero)]
    [0 (one-or-zero) 0]
    [(one-or-zero) 0 (one-or-zero) 0]] [id 1]])

(defn flip-x [[[[a b c]
                [d e f]
                [g h i]] v]]
  [[[c b a]
    [f e d]
    [i h g]] v])

(defn flip-y [[[[a b c]
                [d e f]
                [g h i]] v]]
  [[[g h i]
    [d e f]
    [a b c]] v])

(defn random-symmetric-ruleset [id]
  (let [rule (random-rule id)
        x (flip-x rule)
        y (flip-y rule)
        xy (flip-x y)
        yx (flip-y x)]
    [rule x y xy yx]))

(def rules (concat
            [[[[0 0 0]
               [0 0 0]
               [0 1 0]] [5 1]]

             [[[0 1 0]
               [0 0 0]
               [0 0 0] [5 1]]]

             [[[0 0 0]
               [1 0 0]
               [0 0 0]] [5 1]]

             [[[0 0 0]
               [0 0 1]
               [0 0 0]] [5 1]]]
            (random-symmetric-ruleset 1) (random-symmetric-ruleset 2) (random-symmetric-ruleset 3)
            (random-symmetric-ruleset 1) (random-symmetric-ruleset 2) (random-symmetric-ruleset 3)))
(println rules)

(defn random-rules [window]
  ;; (println window)
  (let [[_ v] (first (filter (fn [[rule _]] (= rule window)) rules))]
    ;; (println match)
    (or v [7 0])))
